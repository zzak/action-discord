name: Notify
description: Send a notifcation
inputs:
  color:
    description: color to use for notification
    required: true
  title:
    description: title of notification
    required: true
  webhook:
    description: webhook to send the notification
    required: true
runs:
  using: "composite"

  steps:
    - name: Get failed jobs
      id: get-failed-jobs
      shell: bash
      continue-on-error: true
      run: |
        resp=$(gh run view ${{ github.run_id }} -R ${{ github.repository }} --json jobs)
        failed=$(echo $resp | jq -c \
          '[.jobs[] | select(.conclusion == "failure") | "- [\(.name | @html)](\(.url))"]')
        echo $failed

        output=$(echo $failed | jq -c \
          'if . == [] then empty else {name: "Failed Job(s)", value: join("\n"), inline: false} end')
        echo $output

        echo "failed=$failed" >> $GITHUB_OUTPUT
        echo "output=$output" >> $GITHUB_OUTPUT
    - name: Get commit message
      id: get-commit-message
      shell: bash
      continue-on-error: true
      run: |
        resp=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/commits/${{ github.sha }})
        result=$(echo $resp | jq -c '.commit | .message | @html | .[0:100]')
        echo $result
        echo "result=$result" >> $GITHUB_OUTPUT
    - name: Sanitize workflow name
      id: sanitize-workflow-name
      shell: bash
      continue-on-error: true
      run: |
        result=$(echo ${{ toJson(github.workflow) }} | jq --raw-input --slurp '. | @html | .[0:80]')
        echo $result
        echo "result=$result" >> $GITHUB_OUTPUT
    - name: Get short SHA
      id: short-sha
      shell: bash
      run: |
        result=$(printf '%.8s' '${{ github.sha }}')
        echo $result
        echo "result=$result" >> $GITHUB_OUTPUT
    - name: Set embed fields
      id: embed-fields
      shell: bash
      run: |
        default=$(jq -cn '{
          name: "Repo",
          value: "[${{ github.event.repository.full_name }}](${{ github.server_url }}/${{ github.repository }})",
          inline: false
        },
        {
          name: "Branch",
          value: "[${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})",
          inline: false
        },
        {
          name: "Commit",
          value: "[${{ steps.short-sha.outputs.result }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})",
          inline: true
        },
        {
          name: "Author",
          value: "[${{ github.actor }}](${{ github.server_url }}/${{ github.actor }})",
          inline: true
        },
        {
          name: "Pipeline",
          value: "[${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
          inline: true
        },
        {
          name: "Message",
          value: ${{ steps.get-commit-message.outputs.result }},
          inline: false
        }')
        echo $default

        combined=$(jq -cs '.' <<< $default'${{steps.get-failed-jobs.outputs.output}}')
        echo $combined
        echo "fields=$combined" >> $GITHUB_OUTPUT
    - name: Generate payload
      id: generate-payload
      shell: bash
      run: |
        payload=$(jq -cn \
          '{
            "username": "GitHub",
            "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            "embeds": [{
              "color": "${{ inputs.color }}",
              "title": "${{ inputs.title}}: [${{ steps.sanitize-workflow-name.outputs.result }}]",
              "fields": ${{steps.embed-fields.outputs.fields}}
            }]
          }')
        echo $payload
        echo "payload=$payload" >> $GITHUB_OUTPUT
    - name: Notify
      id: notify
      shell: bash
      run: |
        curl \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -X POST ${{ inputs.webhook }} \
          --data-raw '${{steps.generate-payload.outputs.payload}}'